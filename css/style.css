html, body{
  overflow-x: hidden;
} /* -x? what counts as overflow? */
body{
  font-family: "Lato", Helvetica, Arial, sans-serif;
  color: #333333;
}
h1, h2, h3, h4, h5, h6{
  font-family: "Varela Round", Helvetica, Arial, sans-serif;
}
h2{
  font-size: 28px;
  font-weight: normal;
  margin-bottom: 5px;
}
p{
  font-size: 16px;
  line-height: 19px;
  font-weight: 100;  /* What is font-weight and what is 
  the difference between "normal" and 100? */
}

/* GRID */
.container {
  margin-right: auto;
  margin-left: auto;
  padding-left: 15px;
  padding-right: 15px;
  position: relative;
}
.container:before,.container:after {
   content: " ";
   display: table;
 }  /* what do these pseudo class do? and what should be in te " "? */

 .container:after {
   clear: both;
 } /* What does this do? Can you explain more of the following?
 This “micro clearfix” generates pseudo-elements 
 and sets their display to table. This creates an anonymous table-cell 
 and a new block formatting context that means 
 the :before pseudo-element prevents top-margin collapse. 
 The :after pseudo-element is used to clear the floats. 
 As a result, there is no need to hide any generated content 
 and the total amount of code needed is reduced. */

 .one-half, .one-third, .one-fourth {
   width:96%; /* why here they are all 96%? How doea that work? In media query, they all have different ones. */
   float:left;
   position:relative;
   min-height: 1px; /* what does min-height do? */
   margin:0 2% 20px;
 }
 @media (min-width: 768px) {
   .container {
     width: 750px;
   }
 }
 @media (min-width: 992px) {
   .container {
     width: 970px;
   }
   .one-half {
     width:46%;
   }
   .one-third {
     width:29.33333%;
   }
   .one-fourth {
     width:21%;
   }
 } /* Why only specify the above in this one? Not the one whose min-width is 768px or 1200px? */
 @media (min-width: 1200px) {
   .container {
     width: 1170px;
   }
 }
 @media (min-width: 1920px) {
   .container.hero { /* Not sure why "hero" is white...Should it be "hero" instead of "container hero"? 
   I did 97% of the screen size according to the ratial observed above */
     width: 1870px;
   }
 }

 /* Header */
 header {
   color:#FFFFFF;
   background: #34495E;
   background-image: linear-gradient(206deg, #5F81A3 0%, #34495E 94%); /* Why we need to flip and the copy from Sketch are not correct? */
 }
 header nav {
   padding:1em 0;
 }
 header nav ul {
   display:inline; /* Why here is inline? What about inline-block? --> Does this mean the "sign in / sign up together" will still be 
   the same object as the logo, but we want sign in and sign up two be two different objects within themselves? */
   text-align: right;
   float:right;
   margin:0;
 }
 header nav ul > li {
   list-style-type: none; /* to remove the underline of a link */
   display: inline-block;
   margin:0 15px;
 }
 header nav ul > li.btn-outline {
   padding:10px 15px;
   border:2px solid #FFFFFF;
   border-radius: 4px;
 }
 header nav ul > li.btn-outline:hover {  /* Here "hover" is a pseudo class */
   background:#FFFFFF;
 }
 header nav ul > li > a {  /* Here "a" refers to the link? */
   color:#FFFFFF;
   text-decoration: none;
 }
 header nav ul > li.btn-outline:hover > a { /* So here with or without ">" both work? */
   color:#34495E;
 }
 header .hero {
   text-align: center;
   display:block;
   position: relative;
 }
 header .hero h1 {
   font-size:48px;
   font-weight: normal;
   margin:95px 0 0; /* When you have three margins, which one is not specified? */
 }
 header .hero p {
   font-size: 22px;
   line-height: 26px;
   font-weight: 100;
   margin:10px 0 40px;
 }
 header .hero img {
   display: block;
   margin:3em auto 0;
 }

 /* Buttons */
 .btn {
   background: #2ECC71;
   box-shadow: 0 2px 0 0 #22894E;
   border-radius: 4px;
   font-weight: 700; /* font-family: Lato-Bold?? */
   padding: 10px 30px;
   color: #FFFFFF;
   border: 2px solid #2ECC71; /* Why need a border? Seems the same with or without it? */
   text-decoration: none;
 }
 /* Benefits */
 .benefits {
  text-align: center;
  display: block; /* Why not inline-block here? Is it for the "ul class='container'"? When it's block, 
  everything center in the center, but inline-block starts at the very beginning? So this can also be applied 
  to the ".benefit ul" part below? */
  position: relative;
 }

.benefits ul {
  margin: 0 auto;
  padding: 4em 0;
}
.benefits ul li {
  list-style-type: none;
  display: inline-block; /* Why not block? They are vertically stacked anyway */
}
.benefits i {
   color:#3498DB;
   font-size:60px;
   margin:0;
   vertical-align: middle;
 }
 .benefits h2 {
   color:#3498DB;
 }
 /* Pricing */
 .pricing {
   background: #34495E url("../images/background.png") top center no-repeat;
   background: url("../images/background.png") top center no-repeat, linear-gradient(206deg, #5F81A3 0%, #34495E 94%);
   /* why we need to repeat the image twice above, can't they be combined? */
   background-size:cover;
   text-align: center;
   padding:4em 0;
 }
.pricing h2, .pricing p {
  color: #FFFFFF;
}
.pricing ul {
   margin:0 auto;
   padding:2em 0;
}
.pricing ul li {
   list-style-type: none;
}
.box {
   padding:0 15px 15px;
   background: #FFFFFF;
   box-shadow: 0px 2px 4px 0px rgba(0,0,0,0.20); /* I don't remember there are shadows for the pricing boxes */
   min-height: 400px; /* What does min-height do? To make sure it does not go any smaller in a small screen like mobile? */
   position: relative;
   margin-top: 25px; /* Are padding and Margi interchangeable? When to use what? 
   Is it usually just specify padding and use margin on one side to position it? */
 }
 .box.middle {
   min-height: 465px;
   margin-top:0px;
 }
.box h3 {
   font-family: "Lato", Helvetica, Arial, sans-serif; /* We set all h1-h6 to Varela Round, so need to change this back to Lato */
   text-transform: uppercase;
   background: #E2E2E2;
   box-shadow: 0px 1px 2px 0px rgba(0,0,0,0.40);
   left:0;
   right:0;
   top:0;
   text-align: center;
   margin:0 -15px 40px; /* -15px margin to counter act the 15px padding in the .box */
   padding:10px 0;
 }
 .box h4 {
   color: #3498DB;
   font-weight: normal;
   font-size: 50px;
   margin: 40px 0 10px;
 }
 .box h4 span {
  vertical-align: top;
  font-size: 32px;
 }
 .box h4 span.month {
  vertical-align: middle;
  font-size: 20px;
  font-weight: 100;
  font-family: "Lato", Helvetica, Arial, sans-serif;
  color: #888888;
 }
 .box ul li {
   font-size:18px;
   margin-bottom:20px; /* Are there any situation under which padding and margin are interchangeable? */
   font-weight: 100;
 }
 .box .btn {
   position:absolute; /* Can we use relative here? Even for absolute, it is still relative to 
   its first parent element that is NOT static */
   bottom:25px;
   left:25px;
   right:25px;
 }
.small {
  font-size: 12px;
  font-style: italic;
  color: #FEFEFE;
  line-height: 15px;
 }

 /* Testimonials */
 .testimonials {
   padding:4em 0;
   text-align: center;
 }
 .testimonials h2 {
   color:#3498DB;
 }
 .testimonials ul li {
   list-style-type: none;
 }
.testimonials blockquote {
  color: #FFFFFF;
  font-style: italic;
  line-height: 24px;
  background: #34495E;
  text-align: left;
  padding: 25px;
  margin: -5px;
  position: relative;
  width: auto; /* Why "width" not "min-width" here? Change depending on the length of the content? */
}
.testimonials blockquote:after {
   top: 100%;
   left: 13%;
   border: solid transparent;
   content: " "; /* Why need this line to show up? */
   height: 0;
   width: 0;
   position: absolute;
   pointer-events: none;
   border-top-color: #34495E;
   border-width: 10px;
   margin-left: -10px; /* How to undertand this more intuitively? */
 }
.testimonials img {
   height: 65px;
   width: 65px;
   border-radius:50%; /* To make it a perfect round */
   float: left;
   display: inline-block; /* In relation with the name and title next to it */
   margin:20px 10px 0 0;
 }
 .testimonials p.name {
   float: left;
   display: inline-block; /* Doesn't seem to be affected when changed to "inline" or "block" WHY? */
   text-align: left;
   font-size:13px;
   margin-top: 30px;
 }




















