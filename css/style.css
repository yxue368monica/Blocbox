html, body{
  overflow-x: hidden;
} /* -x? what counts as overflow? */
body{
  font-family: "Lato", Helvetica, Arial, sans-serif;
  color: #333333;
}
h1, h2, h3, h4, h5, h6{
  font-family: "Varela Round", Helvetica, Arial, sans-serif;
}
h2{
  font-size: 28px;
  font-weight: normal;
  margin-bottom: 5px;
}
p{
  font-size: 16px;
  line-height: 19px;
  font-weight: 100;  /* Font-weight is how thick the characters are, normal is thicker than 100. */
}

/* GRID */ 
.container {
  margin-right: auto;
  margin-left: auto;
  padding-left: 15px;
  padding-right: 15px;
  position: relative;
}
.container:before,.container:after {
   content: " ";
   display: table;
 }  /* what do these pseudo class do? and what should be in te " "? A filler? */

 .container:after {
   clear: both;
 } /* What does this do? Can you explain more of the following?
 This “micro clearfix” generates pseudo-elements 
 and sets their display to table. This creates an anonymous table-cell 
 and a new block formatting context that means 
 the :before pseudo-element prevents top-margin collapse. 
 The :after pseudo-element is used to clear the floats. 
 As a result, there is no need to hide any generated content 
 and the total amount of code needed is reduced. */

 .one-half, .one-third, .one-fourth {
   width:96%; /* why here they are all 96%? How does that work? In media query, they all have different ones. */
   float:left;
   position:relative;
   min-height: 1px; /* what does min-height do? */
   margin:0 2% 20px;
 }
 @media (min-width: 320px) {
   .container {
     width: 312px;
   }
    .one-half {
     width:46%;
   }
   #mac {
    width: 100%;
   }
   footer .logo {
    padding: 18px 0 0;
   }
 }
 @media (min-width: 460px) {
   .container {
     width: 446px;
   }
    .one-half {
     width:46%;
   }
   #mac {
    width: 100%;
   }
   footer .logo {
    padding: 18px 0 0;
   }
 }
 @media (min-width: 768px) {
   .container {
     width: 750px;
   }
    .one-half {
     width:46%;
   }
   .one-third {
     width:29.33333%;
   }
   .one-fourth {
     width:21%;
   }
   #mac {
    width: 70%;
   }
   footer .logo {
    padding: 18px 0 0;
   }
 }
 @media (min-width: 992px) {
   .container {
     width: 970px;
   }
   .one-half {
     width:46%;
   }
   .one-third {
     width:29.33333%;
   }
   .one-fourth {
     width:21%;
   }
   footer .logo {
    padding: 2.35em 0;
   }
 } /* Why only specify the above in this one? Not the one whose min-width is 768px or 1200px? */
 @media (min-width: 1200px) {
   .container {
     width: 1170px;
   }
   footer .logo {
    padding: 2.35em 0;
   }
 }
 /* For Larger TV Screen */
 @media (min-width: 1920px) {
   .container.hero { /* Not sure why "hero" is white...Should it be "hero" instead of "container hero"? 
   I did 97% of the screen size according to the ratial observed above */
     width: 1870px;
   } 
 }  /* So using media queries is a responsive design because the styling of the webpage actually changes when you resize the screen?
 Then do you have to redesign the mobile version again? For laptop screen, some webpages modify the content according to browser size,
 some don't (content just disappear.) Which one is better? AND ARE SCREEN RESOLUTION AND SIZE THE SAME THING? 

 /* Header */
 header {
   color:#FFFFFF;
   background: #34495E;
   background-image: linear-gradient(206deg, #5F81A3 0%, #34495E 94%); /* Why we need to flip and the copy from Sketch are not correct? */
 }
 header nav {
   padding:1em 0;
 }
 header nav ul {
   display:block; /* Why here is inline? What about inline-block? --> Does this mean the "sign in / sign up together" will still be 
   the same object as the logo, but we want sign in and sign up two be two different objects within themselves? */
   z-index: 1;
   text-align: center;
   float:right;
   margin:0; /* How to make the sign-in, sign-up not going down to the second line when shrinking the screen size? */
 }
 header nav ul > li {
   list-style-type: none; /* to remove the underline of a link */
   display: inline-block;
   margin:0 15px;
 }
 header nav ul > li.btn-outline {
   padding:10px 15px;
   border:2px solid #FFFFFF;
   border-radius: 4px;
   text-align: center;
 }
 header nav ul > li.btn-outline:hover {  /* Here "hover" is a pseudo class */
   background:#FFFFFF;
 }
 header nav ul > li > a {  /* Here "a" refers to the link? */
   color:#FFFFFF;
   text-decoration: none;
 }
 header nav ul > li.btn-outline:hover > a { /* So here with or without ">" both work? */
   color:#34495E;
 }
 header .hero {
   text-align: center;
   display:block;
   position: relative;
 }
 header .hero h1 {
   font-size:48px;
   font-weight: normal;
   margin:95px 0 0; /* When you have three margins, which one is not specified? */
 }
 header .hero p {
   font-size: 22px;
   line-height: 26px;
   font-weight: 100;
   margin:10px 0 40px;
 }
 header .hero img {
   display: block;
   margin:3em auto 0;
 }

 /* Buttons */
 .btn {
   background: #2ECC71;
   box-shadow: 0 2px 0 0 #22894E;
   border-radius: 4px;
   font-weight: 700; /* font-family: Lato-Bold?? */
   padding: 10px 30px;
   color: #FFFFFF;
   border: 2px solid #2ECC71; /* Why need a border? Seems the same with or without it? */
   text-decoration: none;
 }
 /* Benefits */
 .benefits {
  text-align: center;
  display: block; /* Why not inline-block here? Is it for the "ul class='container'"? When it's block, 
  everything center in the center, but inline-block starts at the very beginning? So this can also be applied 
  to the ".benefit ul" part below? */
  position: relative;
 }

.benefits ul {
  margin: 0 auto;
  padding: 4em 0;
}
.benefits ul li {
  list-style-type: none;
  display: inline-block; /* Why not block? They are vertically stacked anyway */
}
.benefits i {
   color:#3498DB;
   font-size:60px;
   margin:0;
   vertical-align: middle;
 }
 .benefits h2 {
   color:#3498DB;
 }
 /* Pricing */
 .pricing {
   background: #34495E url("../images/background.png") top center no-repeat;
   background: url("../images/background.png") top center no-repeat, linear-gradient(206deg, #5F81A3 0%, #34495E 94%);
   /* why we need to repeat the image twice above, can't they be combined? */
   background-size:cover;
   text-align: center;
   padding:4em 0;
 }
.pricing h2, .pricing p {
  color: #FFFFFF;
}
.pricing ul {
   margin:0 auto;
   padding:2em 0;
}
.pricing ul li {
   list-style-type: none;
}
.box {
   padding:0 15px 15px;
   background: #FFFFFF;
   box-shadow: 0px 2px 4px 0px rgba(0,0,0,0.20); /* I don't remember there are shadows for the pricing boxes */
   min-height: 400px; /* What does min-height do? To make sure it does not go any smaller in a small screen like mobile? */
   position: relative;
   margin-top: 25px; /* Are padding and Margi interchangeable? When to use what? 
   Is it usually just specify padding and use margin on one side to position it? */
 }
 .box.middle {
   min-height: 465px;
   margin-top:0px;
 }
.box h3 {
   font-family: "Lato", Helvetica, Arial, sans-serif; /* We set all h1-h6 to Varela Round, so need to change this back to Lato */
   text-transform: uppercase;
   background: #E2E2E2;
   box-shadow: 0px 1px 2px 0px rgba(0,0,0,0.40);
   left:0;
   right:0;
   top:0;
   text-align: center;
   margin:0 -15px 40px; /* -15px margin to counter act the 15px padding in the .box */
   padding:10px 0;
 }
 .box h4 {
   color: #3498DB;
   font-weight: normal;
   font-size: 50px;
   margin: 40px 0 10px;
 }
 .box h4 span {
  vertical-align: top;
  font-size: 32px;
 }
 .box h4 span.month {
  vertical-align: middle;
  font-size: 20px;
  font-weight: 100;
  font-family: "Lato", Helvetica, Arial, sans-serif;
  color: #888888;
 }
 .box ul li {
   font-size:18px;
   margin-bottom:20px; /* Are there any situation under which padding and margin are interchangeable? */
   font-weight: 100;
 }
 .box .btn {
   position:absolute; /* Can we use relative here? Even for absolute, it is still relative to 
   its first parent element that is NOT static */
   bottom:25px;
   left:25px;
   right:25px;
 }
.small {
  font-size: 12px;
  font-style: italic;
  color: #FEFEFE;
  line-height: 15px;
 }

 /* Testimonials */
 .testimonials {
   padding:4em 0;
   text-align: center;
 }
 .testimonials h2 {
   color:#3498DB;
 }
 .testimonials ul li {
   list-style-type: none;
 }
.testimonials blockquote {
  color: #FFFFFF;
  font-style: italic;
  line-height: 24px;
  background: #34495E;
  text-align: left;
  padding: 25px;
  margin: -5px;
  position: relative;
  width: auto; /* Why "width" not "min-width" here? Change depending on the length of the content? */
}
.testimonials blockquote:after {
   top: 100%;
   left: 13%;
   border: solid transparent;
   content: " "; /* Why need this line to show up? */
   height: 0;
   width: 0;
   position: absolute;
   pointer-events: none;
   border-top-color: #34495E;
   border-width: 10px;
   margin-left: -10px; /* How to undertand this more intuitively? */
 }
.testimonials img {
   height: 65px;
   width: 65px;
   border-radius:50%; /* To make it a perfect round */
   float: left;
   display: inline-block; /* In relation with the name and title next to it */
   margin:20px 10px 0 0;
 }
 .testimonials p.name {
   float: left;
   display: inline-block; /* Doesn't seem to be affected when changed to "inline" or "block" WHY? */
   text-align: left;
   font-size:13px;
   margin-top: 30px;
 }
 .one-fourth.down{
  position: relative;
  margin-top: 20px;
 }

/* Call to action */
.call-to-action div {
   padding:0em 0;
   text-align: center;
   margin-bottom: 6em;
 }
 .call-to-action h2 {
   color:#3498DB;
 }
 .call-to-action p {
   line-height: 24px;
   margin-bottom: 30px; 
 }
 /* Why can't I do the following to change the spacing?
 .call-to-action.container.btn {
   position: relative;
   margin-top: 50px;
 } */

 /* Footer */
 footer {
   background-color: #34495E;
   background-image: linear-gradient(to top, #3498DB 0%, #3498DB 50%, #34495E 50%, #34495E 100%); /* What does this do? */
   color: #FFFFFF;
   height: 150px;
   position: relative;
   overflow: hidden;
   z-index: 0; /* What does this do? Why not 1? */
 }
 footer p, footer nav ul {
   font-size:14px;
   font-weight:100;
   text-align: center;
   margin: 10px auto 0;
 }
 footer nav ul li {
   list-style-type: none;
   display: inline;
 }
 footer nav ul li a {
   color:#FFFFFF;
   text-decoration: none; /* remove underline */
 }
 footer .right-footer-block {
   background-color: transparent; /* This doesn't specify the div size so it will be as long as the dark blue 
   background-color. But doesn transparent mean it's showing the dark blue then? */
 }
 footer .logo{
   padding: 2em 0;
   margin: 0 auto;
   display: block; 
 } /* All the above are for "Mobile First" rule? So the blocbox logo would appear on the second line as block and in the middle? 
 I don't see the logo when I size down the screen? */

@media (min-width: 320px) {
   footer {
    height: 300px;
   }
   footer .left-footer-block{
    width: 446px;
    height: 100px;
    background-color: #34495E;
    display: block;
   }
   footer p {
    padding: 0, auto;
    text-align: center;
    margin-top: 3em;
    margin-left: -7em;
    position: relative;
   }
   footer nav ul {
    padding: 0, auto;
    text-align: center;
    margin-top: -7em;
    margin-left: -3em;
    position: relative;
   }
   footer .right-footer-block{
    width: 446px;
    height: 100px;
    background-color: #3498DB;
    display: block;
   }
   footer .logo {
    padding: 0, auto;
    text-align: center;
    margin-top: -2.5em;
    margin-left: -7.5em;
    position: relative;
   }
 } 
 @media (min-width: 460px) {
   footer {
    height: 300px;
   }
   footer .left-footer-block{
    width: 446px;
    height: 100px;
    background-color: #34495E;
    display: block;
   }
   footer p {
    padding: 0, auto;
    text-align: center;
    margin-top: 3em;
    position: relative;
   }
   footer nav ul {
    padding: 0, auto;
    text-align: center;
    margin-top: -7em;
    position: relative;
   }
   footer .right-footer-block{
    width: 446px;
    height: 100px;
    background-color: #3498DB;
    display: block;
   }
   footer .logo {
    padding: 0, auto;
    text-align: center;
    margin-top: -2.5em;
    position: relative;
   }
 } 
@media (min-width: 768px){
   footer{
     background-color: #3498DB;
     background-image: linear-gradient(to left,
        #3498DB 0%, #3498DB 33.33337%, #34495E 33.33337%, #34495E 100%); /* Does this mean the gradient goes from right to left? */
     height: 100px;
   }
   footer p {
     padding: 2em 0;
     text-align: left;
     position: relative;
     margin: auto;
     margin-top: 0.45em; /* I can use a margin on top of another margin? */
   }
   footer nav ul{
     padding: 2em 0;
     text-align: left;
     position: relative;
     margin: auto;
     margin-top: 0.75em;
   }
   footer .left-footer-block {
     background-color: #34495E;
     width: 29.33333%;
     display: block;
   }
   footer .middle-footer-block {
     background-color: #34495E;
     width: 29.33333%;
     display: block;
   }
   footer .right-footer-block {
     background-color: #3498DB;
     width: 29.33333%;
     display: block;
   }
   footer .logo{
     padding: 2em 0 2em 1.5em; /* Why 2, 0, 2, 1.5? What are these sizing? */
     position: relative;
     margin: auto;
   } 
  } 

/* Dashboard */
.dashboard {
  background: #F7F7F7;
} 
.left-nav { /* So this is the little hamburger icon? */
  height: 100%;
  width:280px;
  position:absolute;
  -webkit-transition: all 0.3s ease-in-out; /* slide in and slide out animation */
  -moz-transition: all 0.3s ease-in-out;
  -o-transition: all 0.3s ease-in-out;
  transition: all 0.3s ease-in-out;
  transform: translate(-280px,0);
    -webkit-transform: translate(-280px,0); /** Chrome & Safari **/
    -o-transform: translate(-280px,0); /** Opera **/
    -moz-transform: translate(-280px,0); /** Firefox **/
 }
 .left-nav.open { /* And this is when the actual left-nav is open? */
   display:block;
   width:280px;
   background: #34495E;
   background-image: linear-gradient(206deg, #5F81A3 0%, #34495E 94%);
   -webkit-transition: all 0.3s ease-in-out;
   -moz-transition: all 0.3s ease-in-out;
   -o-transition: all 0.3s ease-in-out;
   transition: all 0.3s ease-in-out;
   transform: translate(0,0);
     -webkit-transform: translate(0,0); /** Chrome & Safari **/
     -o-transform: translate(0,0); /** Opera **/
     -moz-transform: translate(0,0); /** Firefox **/
     z-index: 100;
 }
 .hamburger {
   position:absolute;
   z-index: 1000;
   background:#34495E;
   color:#FFF;
   text-decoration: none;
   font-size: 22px;
   padding: 10px 15px;
   border-radius: 4px;
   left: 5px;
   top: 15px;
 }

@media (min-width:992px) {
.left-nav {
  min-height: 100vh; /* span 100 to the top and bottom regardlass of browser size -> match viewport? It doesn't go all the way to the bottom */
  width: 14.66666667%;
  color: #FFFFFF;
  background: #34495E;
  background-image: linear-gradient(206deg, #5F81A3 0%, #34495E 94%);
  position: fixed;
  float: left;
  display: block;
  transform: translate(0,0);
  -webkit-transform: translate(0,0); /** Chrome & Safari **/
  -o-transform: translate(0,0); /** Opera **/
  -moz-transform: translate(0,0); /** Firefox **/
}
.left-nav.open {
     width:14.66666667%;
     transform: translate(0,0);
     -webkit-transform: translate(0,0); /** Chrome & Safari **/
     -o-transform: translate(0,0); /** Opera **/
     -moz-transform: translate(0,0); /** Firefox **/
   } /* Why need all of the above if there's not gonna be a hambuger? */
   .hamburger {
     display:none; 
   }
}

.left-nav .site-logo {
   padding:20px 0;
   background:#34495E;
   display:block;
   text-align: center;
 }
 .left-nav .items {
   padding:0 6%;
 }
 .left-nav .items p { /* In the course, it listed as ".left-nav .items p"? */
   font-weight: 600;
   text-transform: uppercase;
   font-size: 12px;
   color: #E2E2E2;
   line-height: 15px;
 }
.left-nav .items ul {
   margin:0 0 40px;
   padding:0;
 }
 .left-nav .items ul li {
   list-style-type: none;
   margin-bottom: 15px;
   line-height: 25px;
 }
 .left-nav .items ul li a { /* Can I just use ".left-nav a" or ".items a" as selector? Tags, classes, and IDs can be mix used? */
   color:#FFFFFF;
   text-decoration: none;
   font-weight: 300; /* I changed it to 300, 100 is just too light? */
}
.left-nav i {
   width:16px;
   text-align: center;
   margin-right:8px;
 }
/* Left Navbar Settings */
.left-nav .settings {
   position:absolute; /* property locks the settings panel to the bottom of the left-side navigation */
   background:#22303E;
   width:100%;
   bottom:0;
   left:0;
   right:0;
   padding:10px 0;
 }
 .left-nav .settings img { 
   height:35px;
   width:35px;
   border-radius: 50%;
   margin-left:10px;
   margin-top: 4px;
   display: inline-block; /* appear nicely next to each other */
 }
 .left-nav .settings p {
   display: inline-block;
   vertical-align: top;
   padding-top: 8px; /* What about margin? How to decide when to use "padding," when "margin"? They can achive the same affect? */
   font-weight: 400;
   margin:4px 0 0 10px;
   color: #FFFFFF;
 }
 .left-nav .settings a { /* Why if I changed to .settings > a, the gear is not white and it affected the pop up menu? */
   color:#FFFFFF;
   text-decoration: none;
   text-align: right;
   float: right;
   margin-right:10px;
   margin-top:-3px;
 }
.left-nav #settings-menu li { /* Why this doesn't work ??? */
  font-weight: 400;
 }
 .content .header > a { /* ">" is to target an element that is directly nested inside another element, 
 so other "a" under "header" won't get affected? */
   float:right;
 }
 .content {
   padding:6em 1% 1.5em;
   float:right;
   width:98%; /* Mobile first so neglact left-nav for now, will adjust later. */
   position: relative;
 }
.content .header {
   margin:0 1% 20px; /* Why here px instead of em? */
 }
 .content .header h1 {
   font-family: "Lato", Helvetica, Arial, sans-serif;
   font-weight: 300; /* I changed it to 300, 100 is just too light? Why font-weight: 250 is way thicker than 300? */
   margin:0 0 30px; /* How to know how much to put for margin and padding? */
   font-size: 36px;
   color: #3498DB;
   line-height: 44px;
   float: left;
   display:inline-block;
 }
 .content .header > a { /* ">" is to target an element that is directly nested inside another element, 
 so other "a" under "header" won't get affected? */
   float:right;
 }
 .content-item {
   width:96%;
   margin:0 2% 25px;
   float:left;
   display:block; /* Why not inline-block? Because mobie first? */
 }
 .item-box {
   display:block;
   height:230px;
   background: #FFFFFF;
   box-shadow: 0px 1px 3px 0px rgba(0,0,0,0.40);
   position: relative;
   overflow: hidden; /* Setting the overflow property to hidden crops it within the item-box border. */
   padding:20px;
 }

 /* Larger Mobile Devices */
 @media (min-width:460px) {
   .content {
     padding:1.5em 1%;
     float:right;
     width:90%;
     position: relative;
   }  
   .content-item {
     width:46%;
     margin:0 2% 25px;
     float:left;
     display:block;
   }
 }
 /* Tablets */
 @media (min-width:768px) {
   .content {
     padding:1.5em 5%; /* why 5% padding here on the left and right? */
     float:right;
     width:90%;
     position: relative;
   }
   .content > .container { /* With or without the ">" the same? no other container under content anyway? */
     width:700px;
   }
   .content-item {
     width:31.33333%;
     margin:0 1% 25px;
   }
 }
  /* Laptops and Desktops */
@media (min-width:992px) {
   .content {
     padding:1.5em 1%;
     float:right;
     width:83.33333333%;
     position: relative;
   }
   .content > .container {
     width:auto; /* What does this mean? -> Span across? */
   }
   .content-item {
     width:23%;
     margin:0 1% 25px;
   }
 }
 .item-box a > img {
   position:absolute;
   height:100%;
   width:auto; /* Auto is to keep image proportionate. */
   top:0;
   left:0;
   right:0;
 }
 .item-box h2 {
   font-family: 'Lato', Helvetica, Arial, sans-serif;
   font-weight: 700;
   font-size: 15px;
   line-height: 17px;
   margin:0;
 }
 .item-box a {
   color: #3498DB;
   text-decoration: none;
 }
 .item-box h2 img {
   width:16px;
   height:16px;
   position:relative;
   top:2px;
   margin-right:5px;
 }
 .item-box p {
   font-size: 14px;
   color: #333333;
   line-height: 18px;
   margin:5px 0 0;
 }

/* Active list in left Nav */
.left-nav .items a:hover, .left-nav .items a:active {
  font-size: 18px;
  font-weight: 700;
}









